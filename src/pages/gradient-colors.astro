---
import Layout from '../layouts/Layout.astro';

const gradients = [
  // 紫色系
  { name: '紫色梦幻', from: '#A531DC', to: '#4300B1', css: 'background: linear-gradient(45deg, #A531DC, #4300B1);' },
  { name: '紫罗兰夜', from: '#A8C0FF', to: '#8E54E9', css: 'background: linear-gradient(45deg, #A8C0FF, #8E54E9);' },
  { name: '薰衣草雾', from: '#B57EDC', to: '#8A2BE2', css: 'background: linear-gradient(45deg, #B57EDC, #8A2BE2);' },
  { name: '葡萄紫韵', from: '#6F2DBD', to: '#4B0082', css: 'background: linear-gradient(45deg, #6F2DBD, #4B0082);' },

  // 红色系
  { name: '绯红夕阳', from: '#FF896D', to: '#D02020', css: 'background: linear-gradient(45deg, #FF896D, #D02020);' },
  { name: '玫瑰烈焰', from: '#FF3366', to: '#CC0033', css: 'background: linear-gradient(45deg, #FF3366, #CC0033);' },
  { name: '珊瑚橙红', from: '#FF7F50', to: '#FF4500', css: 'background: linear-gradient(45deg, #FF7F50, #FF4500);' },
  { name: '酒红魅影', from: '#800020', to: '#4A0000', css: 'background: linear-gradient(45deg, #800020, #4A0000);' },

  // 蓝色系
  { name: '深海蓝调', from: '#3793FF', to: '#0017E4', css: 'background: linear-gradient(45deg, #3793FF, #0017E4);' },
  { name: '天蓝海洋', from: '#00C6FF', to: '#0072FF', css: 'background: linear-gradient(45deg, #00C6FF, #0072FF);' },
  { name: '湖水蓝调', from: '#0ACFFE', to: '#495AFF', css: 'background: linear-gradient(45deg, #0ACFFE, #495AFF);' },
  { name: '午夜深蓝', from: '#000080', to: '#00008B', css: 'background: linear-gradient(45deg, #000080, #00008B);' },

  // 绿色系
  { name: '清新绿意', from: '#43E97B', to: '#38F9D7', css: 'background: linear-gradient(45deg, #43E97B, #38F9D7);' },
  { name: '青草绿野', from: '#96FBC4', to: '#F9F586', css: 'background: linear-gradient(45deg, #96FBC4, #F9F586);' },
  { name: '森林绿意', from: '#228B22', to: '#006400', css: 'background: linear-gradient(45deg, #228B22, #006400);' },
  { name: '薄荷清凉', from: '#98FF98', to: '#00FA9A', css: 'background: linear-gradient(45deg, #98FF98, #00FA9A);' },

  // 黄色/橙色系
  { name: '金黄暖阳', from: '#FFD439', to: '#FF7A00', css: 'background: linear-gradient(45deg, #FFD439, #FF7A00);' },
  { name: '暖阳橘光', from: '#FFB347', to: '#FFCC33', css: 'background: linear-gradient(45deg, #FFB347, #FFCC33);' },
  { name: '柠檬晨曦', from: '#FFF44F', to: '#FFD700', css: 'background: linear-gradient(45deg, #FFF44F, #FFD700);' },
  { name: '琥珀黄昏', from: '#FF7E00', to: '#FFD300', css: 'background: linear-gradient(45deg, #FF7E00, #FFD300);' },

  // 粉色系
  { name: '粉嫩樱花', from: '#FF9A9E', to: '#FAD0C4', css: 'background: linear-gradient(45deg, #FF9A9E, #FAD0C4);' },
  { name: '玫瑰金', from: '#F6CEEC', to: '#D939CD', css: 'background: linear-gradient(45deg, #F6CEEC, #D939CD);' },
  { name: '蜜桃甜心', from: '#FFB6C1', to: '#FF69B4', css: 'background: linear-gradient(45deg, #FFB6C1, #FF69B4);' },
  { name: '紫霞仙子', from: '#E0B0FF', to: '#DA70D6', css: 'background: linear-gradient(45deg, #E0B0FF, #DA70D6);' },

  // 中性色系
  { name: '深邃夜空', from: '#434343', to: '#000000', css: 'background: linear-gradient(45deg, #434343, #000000);' },
  { name: '银灰未来', from: '#C0C0C0', to: '#808080', css: 'background: linear-gradient(45deg, #C0C0C0, #808080);' },
  { name: '暖沙米白', from: '#F5DEB3', to: '#FFF8DC', css: 'background: linear-gradient(45deg, #F5DEB3, #FFF8DC);' },
  { name: '石墨灰阶', from: '#696969', to: '#2F4F4F', css: 'background: linear-gradient(45deg, #696969, #2F4F4F);' },

  // 特殊效果
  { name: '晨曦微光', from: '#FFF3B0', to: '#CA26FF', css: 'background: linear-gradient(45deg, #FFF3B0, #CA26FF);' },
  { name: '霓虹幻彩', from: '#FF00FF', to: '#00FFFF', css: 'background: linear-gradient(45deg, #FF00FF, #00FFFF);' },
  { name: '极光绿影', from: '#7FFF00', to: '#00FF7F', css: 'background: linear-gradient(45deg, #7FFF00, #00FF7F);' },
  { name: '金属铜色', from: '#B87333', to: '#CD7F32', css: 'background: linear-gradient(45deg, #B87333, #CD7F32);' },

  // 新增色系
  { name: '海洋之心', from: '#40E0D0', to: '#4682B4', css: 'background: linear-gradient(45deg, #40E0D0, #4682B4);' },
  { name: '日落余晖', from: '#FF6B6B', to: '#FFE66D', css: 'background: linear-gradient(45deg, #FF6B6B, #FFE66D);' },
  { name: '翡翠碧玉', from: '#00C9A7', to: '#005B4A', css: 'background: linear-gradient(45deg, #00C9A7, #005B4A);' },
  { name: '焦糖玛奇朵', from: '#D2691E', to: '#8B4513', css: 'background: linear-gradient(45deg, #D2691E, #8B4513);' },
  { name: '银河星光', from: '#1A1A2E', to: '#16213E', css: 'background: linear-gradient(45deg, #1A1A2E, #16213E);' },
  { name: '粉蓝梦境', from: '#89CFF0', to: '#F4C2C2', css: 'background: linear-gradient(45deg, #89CFF0, #F4C2C2);' },
  { name: '秋日枫叶', from: '#FF6F61', to: '#C23B22', css: 'background: linear-gradient(45deg, #FF6F61, #C23B22);' },
  { name: '孔雀蓝绿', from: '#009B95', to: '#004D46', css: 'background: linear-gradient(45deg, #009B95, #004D46);' },
  { name: '薰衣草黄昏', from: '#E6E6FA', to: '#9370DB', css: 'background: linear-gradient(45deg, #E6E6FA, #9370DB);' },
  { name: '巧克力布朗尼', from: '#6B4423', to: '#3E2723', css: 'background: linear-gradient(45deg, #6B4423, #3E2723);' },
  { name: '冰霜雪国', from: '#F0FFFF', to: '#B0E0E6', css: 'background: linear-gradient(45deg, #F0FFFF, #B0E0E6);' },
  { name: '热带雨林', from: '#3CB371', to: '#2E8B57', css: 'background: linear-gradient(45deg, #3CB371, #2E8B57);' },
  { name: '紫金王朝', from: '#4B0082', to: '#FFD700', css: 'background: linear-gradient(45deg, #4B0082, #FFD700);' },
  { name: '珊瑚浅海', from: '#FF7F50', to: '#20B2AA', css: 'background: linear-gradient(45deg, #FF7F50, #20B2AA);' },
  { name: '暮光之城', from: '#2C3E50', to: '#FD746C', css: 'background: linear-gradient(45deg, #2C3E50, #FD746C);' },
  { name: '青柠苏打', from: '#00FF00', to: '#7FFF00', css: 'background: linear-gradient(45deg, #00FF00, #7FFF00);' }
];
---

<Layout title="渐变色生成器 - Online Tools">
  <main class="max-w-4xl mx-auto px-4 py-4 sm:py-8">
    <h1 class="text-xl sm:text-2xl font-bold mb-4 sm:mb-6">渐变色生成器</h1>
    
    <div class="space-y-4 sm:space-y-6">
      <!-- 预览区域 -->
      <div class="w-full h-40 sm:h-48 rounded-lg shadow-md" id="gradientPreview"></div>
      
      <!-- 控制面板 -->
      <div class="bg-gray-50 rounded-lg p-4 sm:p-6">
        <h2 class="text-base sm:text-lg font-semibold mb-3 sm:mb-4">渐变设置</h2>
        
        <div class="space-y-3 sm:space-y-4">
          <!-- 渐变类型 -->
          <div>
            <label class="block text-sm sm:text-base font-medium text-gray-700 mb-1 sm:mb-2">
              渐变类型
            </label>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-3">
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="gradientType" value="linear" checked class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">线性渐变</span>
              </label>
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="gradientType" value="radial" class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">径向渐变</span>
              </label>
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="gradientType" value="conic" class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">锥形渐变</span>
              </label>
            </div>
          </div>
          
          <!-- 线性渐变方向 -->
          <div id="linearDirectionContainer">
            <label class="block text-sm sm:text-base font-medium text-gray-700 mb-1 sm:mb-2">
              渐变方向
            </label>
            <div class="grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-3">
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="linearDirection" value="to right" checked class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">从左到右</span>
              </label>
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="linearDirection" value="to bottom" class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">从上到下</span>
              </label>
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="linearDirection" value="to bottom right" class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">左上到右下</span>
              </label>
              <label class="flex items-center space-x-2 cursor-pointer">
                <input type="radio" name="linearDirection" value="to bottom left" class="text-blue-600 focus:ring-blue-500 h-4 w-4" />
                <span class="text-sm sm:text-base">右上到左下</span>
              </label>
            </div>
          </div>
          
          <!-- 颜色选择 -->
          <div>
            <label class="block text-sm sm:text-base font-medium text-gray-700 mb-1 sm:mb-2">
              颜色选择
            </label>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <div>
                <label class="block text-xs sm:text-sm text-gray-600 mb-1">起始颜色</label>
                <div class="flex">
                  <input type="color" id="startColor" value="#4f46e5" class="w-10 h-10 rounded-l-md border border-gray-300" />
                  <input type="text" id="startColorText" value="#4f46e5" class="flex-1 px-3 py-2 border border-l-0 border-gray-300 rounded-r-md text-sm focus:outline-none focus:ring-1 focus:ring-blue-500" />
                </div>
              </div>
              <div>
                <label class="block text-xs sm:text-sm text-gray-600 mb-1">结束颜色</label>
                <div class="flex">
                  <input type="color" id="endColor" value="#ec4899" class="w-10 h-10 rounded-l-md border border-gray-300" />
                  <input type="text" id="endColorText" value="#ec4899" class="flex-1 px-3 py-2 border border-l-0 border-gray-300 rounded-r-md text-sm focus:outline-none focus:ring-1 focus:ring-blue-500" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- 代码输出 -->
      <div class="bg-gray-50 rounded-lg p-4 sm:p-6">
        <div class="flex justify-between items-center mb-3 sm:mb-4">
          <h2 class="text-base sm:text-lg font-semibold">CSS 代码</h2>
          <button id="copyBtn" class="px-3 py-1.5 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors text-sm flex items-center space-x-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
            </svg>
            <span>复制</span>
          </button>
        </div>
        <div class="bg-gray-900 text-gray-100 rounded-lg p-3 sm:p-4 overflow-x-auto">
          <pre id="cssCode" class="text-xs sm:text-sm"></pre>
        </div>
      </div>
      
      <!-- 预设渐变 -->
      <div class="bg-gray-50 rounded-lg p-4 sm:p-6">
        <h2 class="text-base sm:text-lg font-semibold mb-3 sm:mb-4">预设渐变</h2>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#4f46e5" data-end="#ec4899"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#3b82f6" data-end="#10b981"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#f97316" data-end="#f43f5e"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#8b5cf6" data-end="#6366f1"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#06b6d4" data-end="#3b82f6"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#f59e0b" data-end="#ef4444"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#14b8a6" data-end="#0ea5e9"></button>
          <button class="preset-gradient h-16 rounded-lg shadow-sm hover:shadow-md transition-shadow" data-start="#6366f1" data-end="#ec4899"></button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // 获取DOM元素
  const gradientPreview = document.getElementById('gradientPreview');
  const cssCode = document.getElementById('cssCode');
  const copyBtn = document.getElementById('copyBtn');
  const startColor = document.getElementById('startColor') as HTMLInputElement;
  const endColor = document.getElementById('endColor') as HTMLInputElement;
  const startColorText = document.getElementById('startColorText') as HTMLInputElement;
  const endColorText = document.getElementById('endColorText') as HTMLInputElement;
  const linearDirectionContainer = document.getElementById('linearDirectionContainer');
  
  // 获取所有渐变类型单选按钮
  const gradientTypeRadios = document.querySelectorAll('input[name="gradientType"]');
  const linearDirectionRadios = document.querySelectorAll('input[name="linearDirection"]');
  const presetGradients = document.querySelectorAll('.preset-gradient');
  
  // 更新渐变预览和CSS代码
  function updateGradient() {
    // 获取当前选中的渐变类型
    const gradientType = document.querySelector('input[name="gradientType"]:checked') as HTMLInputElement;
    
    // 获取颜色值
    const startColorValue = startColor.value;
    const endColorValue = endColor.value;
    
    let gradientCSS = '';
    
    // 根据渐变类型生成CSS
    if (gradientType.value === 'linear') {
      const direction = document.querySelector('input[name="linearDirection"]:checked') as HTMLInputElement;
      gradientCSS = `linear-gradient(${direction.value}, ${startColorValue}, ${endColorValue})`;
      linearDirectionContainer.style.display = 'block';
    } else if (gradientType.value === 'radial') {
      gradientCSS = `radial-gradient(circle, ${startColorValue}, ${endColorValue})`;
      linearDirectionContainer.style.display = 'none';
    } else if (gradientType.value === 'conic') {
      gradientCSS = `conic-gradient(from 0deg, ${startColorValue}, ${endColorValue})`;
      linearDirectionContainer.style.display = 'none';
    }
    
    // 更新预览
    if (gradientPreview) {
      gradientPreview.style.background = gradientCSS;
    }
    
    // 更新CSS代码
    if (cssCode) {
      cssCode.textContent = `background: ${gradientCSS};`;
    }
    
    // 更新预设渐变
    presetGradients.forEach(preset => {
      const presetStart = (preset as HTMLElement).dataset.start;
      const presetEnd = (preset as HTMLElement).dataset.end;
      if (presetStart && presetEnd) {
        if (gradientType.value === 'linear') {
          const direction = document.querySelector('input[name="linearDirection"]:checked') as HTMLInputElement;
          (preset as HTMLElement).style.background = `linear-gradient(${direction.value}, ${presetStart}, ${presetEnd})`;
        } else if (gradientType.value === 'radial') {
          (preset as HTMLElement).style.background = `radial-gradient(circle, ${presetStart}, ${presetEnd})`;
        } else if (gradientType.value === 'conic') {
          (preset as HTMLElement).style.background = `conic-gradient(from 0deg, ${presetStart}, ${presetEnd})`;
        }
      }
    });
  }
  
  // 初始化
  updateGradient();
  
  // 事件监听
  gradientTypeRadios.forEach(radio => {
    radio.addEventListener('change', updateGradient);
  });
  
  linearDirectionRadios.forEach(radio => {
    radio.addEventListener('change', updateGradient);
  });
  
  startColor.addEventListener('input', () => {
    startColorText.value = startColor.value;
    updateGradient();
  });
  
  endColor.addEventListener('input', () => {
    endColorText.value = endColor.value;
    updateGradient();
  });
  
  startColorText.addEventListener('input', () => {
    if (/^#[0-9A-Fa-f]{6}$/.test(startColorText.value)) {
      startColor.value = startColorText.value;
      updateGradient();
    }
  });
  
  endColorText.addEventListener('input', () => {
    if (/^#[0-9A-Fa-f]{6}$/.test(endColorText.value)) {
      endColor.value = endColorText.value;
      updateGradient();
    }
  });
  
  // 复制CSS代码
  copyBtn.addEventListener('click', () => {
    if (cssCode) {
      const textToCopy = cssCode.textContent || '';
      navigator.clipboard.writeText(textToCopy);
      
      // 显示复制成功提示
      copyBtn.innerHTML = '<span>已复制!</span>';
      setTimeout(() => {
        copyBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" /></svg><span>复制</span>';
      }, 2000);
    }
  });
  
  // 预设渐变点击事件
  presetGradients.forEach(preset => {
    preset.addEventListener('click', () => {
      const presetStart = (preset as HTMLElement).dataset.start;
      const presetEnd = (preset as HTMLElement).dataset.end;
      if (presetStart && presetEnd) {
        startColor.value = presetStart;
        endColor.value = presetEnd;
        startColorText.value = presetStart;
        endColorText.value = presetEnd;
        updateGradient();
      }
    });
  });
</script>

<style>
.text-shadow {
  text-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

@keyframes fade-in-up {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.animate-fade-in-up {
  animation: fade-in-up 0.3s ease-out;
}
</style> 